name: Deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Extract metadata
      id: meta
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "version=latest" >> $GITHUB_OUTPUT
        fi
        echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/agent-manager:${{ steps.meta.outputs.version }}
          ghcr.io/${{ github.repository_owner }}/agent-manager:latest
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.created=${{ steps.meta.outputs.date }}
          org.opencontainers.image.revision=${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up environment variables
      id: env
      run: |
        if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
          echo "deployment_host=${{ secrets.PROD_HOST }}" >> $GITHUB_OUTPUT
          echo "deployment_user=${{ secrets.PROD_USER }}" >> $GITHUB_OUTPUT
          echo "deployment_key=${{ secrets.PROD_SSH_KEY }}" >> $GITHUB_OUTPUT
        else
          echo "deployment_host=${{ secrets.STAGING_HOST }}" >> $GITHUB_OUTPUT
          echo "deployment_user=${{ secrets.STAGING_USER }}" >> $GITHUB_OUTPUT
          echo "deployment_key=${{ secrets.STAGING_SSH_KEY }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Extract metadata
      id: meta
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "version=latest" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ steps.env.outputs.deployment_key }}
    
    - name: Deploy via SSH
      run: |
        # Create docker-compose.yml with correct image tag
        sed "s/\${IMAGE_TAG}/${{ steps.meta.outputs.version }}/" deploy/docker-compose.template.yml > docker-compose.deploy.yml
        
        # Copy docker-compose file to target host
        scp -o StrictHostKeyChecking=no docker-compose.deploy.yml ${{ steps.env.outputs.deployment_user }}@${{ steps.env.outputs.deployment_host }}:~/docker-compose.yml
        
        # Deploy using docker-compose on remote host
        ssh -o StrictHostKeyChecking=no ${{ steps.env.outputs.deployment_user }}@${{ steps.env.outputs.deployment_host }} <<'EOF'
          # Pull the latest image
          docker-compose pull
          
          # Start the containers
          docker-compose up -d
          
          # Show container status
          docker-compose ps
        EOF